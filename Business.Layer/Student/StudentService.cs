using EFCodeFirst;
using Microsoft.EntityFrameworkCore;
using MyModel;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
// Include the PDF Generator.
using PhantomJs.NetCore;
using DinkToPdf;

namespace Business.Layer.Student
{
    public class StudentService : IStudentService
    {
        private readonly MyDbContext _myDbContext;

        public StudentService(MyDbContext myDbContext)
        {
            _myDbContext = myDbContext ?? throw new ArgumentNullException(nameof(myDbContext));
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="student"></param>
        /// <returns></returns>
        public int CreateStudent(StudentModel student)
        {
            EFCodeFirst.Student studentDb = new EFCodeFirst.Student()
            {
                FirstName = student.FirstName.Capitalize(),
                LastName = student.LastName.Capitalize(),
                EnrollmentDate = student.EnrollmentDate,
                State = State.Active,
                Address = new StudentAddress()
                {
                    Address1 = student.Address.Address1,
                    Address2 = student.Address.Address2,
                    City = student.Address.City,
                    Country = student.Address.Country,
                    Zipcode = student.Address.Zipcode,
                    State = student.Address.State
                },
                Owner = new Person()
                {
                    Email = "marco@mail.com",
                    Name = "Marco",
                    Surname = "Petruzzelli"
                },
                RenameTest = JsonConvert.SerializeObject(new Person()
                {
                    Email = "mario.rossi@gmail.com",
                    Name = "mario",
                    Surname = "rossi"
                })
            };

            _myDbContext.Students.Add(studentDb);

            _myDbContext.SaveChanges();

            return studentDb.ID;
        }


        public async Task<StudentModel> GetStudentAsync(int studentId)
        {


            IQueryable<EFCodeFirst.Student> iStudent = _myDbContext.Students
                .Where(x => x.ID == studentId);

            // questa istruzione verrà ignorata perché non avviene l'assegnazione
            iStudent.Where(x => x.State == State.Active);

            // questa istruzione verrà aggiunta in and alle altre condizioni
            iStudent = iStudent.Where(x => x.State == State.Inactive);


            var student = await iStudent
                .Select(x => new StudentModel()
                {
                    StudentID = x.ID,
                    EnrollmentDate = x.EnrollmentDate,
                    FirstName = x.FirstName,
                    LastName = x.LastName,
                    //Address = new AddressModel() { Address1 = JsonConvert.DeserializeObject<Person>(x.RenameTest).Email }
                    Person = new PersonModel()
                    {
                        Email = x.Owner.Email,
                        Surname = x.Owner.Surname,
                        Name = x.Owner.Name
                    }
                })
                .FirstOrDefaultAsync();

            return student;
        }

        public async void GeneratePdf()
        {
            string currentDirectory = Directory.GetCurrentDirectory();
            string phantomJsRootFolder = Path.Combine(currentDirectory, "PhantomJsRoot");

            // the pdf generator needs to know the path to the folder with .exe files.
            PdfGenerator generator = new PdfGenerator(phantomJsRootFolder);
            string htmlToConvert =
@"
<!DOCTYPE html>
<html>
<head>
</head>
<body>
    <h1>Hello World!</h1>
    <p>This PDF has been generated by PhantomJs ;)</p>
</body>
</html>
";
            // Generate pdf from html and place in the current folder.
            string pathOftheGeneratedPdf = generator.GeneratePdf(htmlToConvert, currentDirectory);

            Console.WriteLine("Pdf generated at: " + pathOftheGeneratedPdf);
        }
        public void Html2Pdf()
        {
            var converter = new BasicConverter(new PdfTools());
            string templateFilePath = Path.Combine(AppContext.BaseDirectory, "templates", "Template.html");
            string html = File.ReadAllText(templateFilePath);
            html = html.Replace("{holder}", "Mannaggia l'inter");
            var doc = new HtmlToPdfDocument()
            {
                GlobalSettings = {
                    ColorMode = ColorMode.Color,
                    Orientation = Orientation.Landscape,
                    PaperSize = PaperKind.A4Plus,
                    
                },
                Objects = {
                    new ObjectSettings() {
                        PagesCount = true,

                        HtmlContent =html,
                        WebSettings = { DefaultEncoding = "utf-8" },
                        HeaderSettings = { FontSize = 9, Right = "Page [page] of [toPage]", Line = true, Spacing = 2.812 }
                    }
                },
            };
            byte[] pdf = converter.Convert(doc);
            File.WriteAllBytes(Path.Combine(AppContext.BaseDirectory, "templates", "test1.pdf"), pdf);
        }
    }
}
